'use strict';
/*
Módulo que implementa llamada a APIs WSO2

Uso:
1. Instanciar un objeto
2. Asignar una configuración utilizando setConfig
El formato es:
{
    "tokenUrl": "https://diactoros.directemar.cl:8243/token",
    "servicesBaseURL": "http://diactoros.directemar.cl:8280/",
    "consumerKey": "XXXXXXXXXXXXXXXXXXX",
    "consumerSecret": "XXXXXXXXXXXXXXXXXXX",
    "services": {"servicio1":"nombreAPI/nombreServicio1", "servicio2":"nombreAPI/nombreServicio2"}
}
3. Llamar al servicio utilizando callService.
Los parámetros de llamada son:
serviceName: nombre del Servicio (ej. "servicio1")
method: GET o POST
accepts: "application/json" o "text/javascript" o "application/xml"
params: listado de parametros para el servicio en el formato
{"param1":"valor1","param2":"valor2",...}

callService retorna una promesa, por lo que la respuesta se debe recibir en .then(function(data){})

*/

var Promise = require('promise');
var request = require("request-promise");

module.exports = {
    "config":"",
    setConfig: function(config){
      this.config = config;
    },
    getToken: function(){
      var self = this;
      //console.log("busca token");
      return new Promise(function(resolve, reject) {
        //console.log("promesa token "+JSON.stringify(self));
        var token = null;
        if (self.config.tokenUrl !== "" && self.config.consumerKey !== "" && self.config.consumerSecret !== "") {
            var auth = new Buffer(self.config.consumerKey + ":" + self.config.consumerSecret);
            //console.log("auth: "+auth.toString());
            var headers = {
                'Authorization': 'Basic ' + auth.toString('base64'),
                'content-type': 'application/json'
            };
            //console.log("Headers: " + JSON.stringify(headers) );
            request({
                    rejectUnauthorized: false,
                    requestCert: true,
                    agent: false,
                    headers: headers,
                    url: self.config.tokenUrl,
                    json: true,
                    method: 'POST',
                    form: {
                        "grant_type": "client_credentials"
                    }
                })
                .then(function(body) {
                    //console.log(JSON.stringify(body));
                    resolve(body);
                })
                .catch(function(err) {
                    console.log(JSON.stringify(err));
                    reject(err);
                });
        }
        else reject("Error");
    })
  },
    callService: function(serviceName, method, accepts, params,requestbox) {
      var self = this;
      //console.log("llama servicio:"+serviceName);
      return new Promise(function(resolve, reject) {
        //console.log("Inicia promesa "+JSON.stringify(self));
        self.getToken().then(function(token) {
          //console.log("Token: "+JSON.stringify(token));
          if (token) {
              var out = [];
 
                for (var key in params) {
                    out.push(key + '=' + encodeURIComponent(params[key]));
                }
              //console.log(out);
             // console.log("Params: " +JSON.stringify(params));
              //console.log("Self: "+JSON.stringify(self.config.services));
              if (self.config.servicesBaseURL !== "" && self.config.services[serviceName]) {
                //console.log("Inicia llamada API:"+self.config.services[serviceName] );
                  if (method === 'GET') {
                      request({
                          headers: {
                              'Authorization': 'Bearer ' + token.access_token,
                              'Accept': accepts
                          },
                          url: self.config.servicesBaseURL + self.config.services[serviceName] + "?" + out.join('&'),
                          json: true,
                          method: method
                      })
                          .then(function (body) {
                              resolve(body);
                          })
                          .catch(function (err) {
                              console.log(JSON.stringify(err));
                              reject(err);
                          });
                  } else if(method ==='POST' && requestbox === undefined) {
 
                      request({
                          headers: {
                              'Authorization': 'Bearer ' + token.access_token,
                              'Accept': accepts
                              //'Content-Type':content = undefined?accepts:content/*,
                              //'Content-Length':JSON.stringify(params).length*/
 
                          },
                          url: self.config.servicesBaseURL + self.config.services[serviceName],
                          json: true,
                          method: method,
                          form:params,
                          //body:params
 
                      })
                          .then(function (body) {
                              resolve(body);
                          })
                          .catch(function (err) {
                              console.log(JSON.stringify(err));
                              reject(err);
                          });
                  }else {
                    request({
                          headers: {
                              'Authorization': 'Bearer ' + token.access_token,
                              'Accept': accepts
                              //'Content-Type':'application/json',
                              //'Content-Length':JSON.stringify(params).length*/
 
                          },
                          url: self.config.servicesBaseURL + self.config.services[serviceName],
                          json: true,
                          method: method,
                          //form:params,
                          body: JSON.parse(params)
 
                      })
                          .then(function (body) {
                              resolve(body);
                          })
                          .catch(function (err) {
                              console.log(JSON.stringify(err));
                              reject(err);
                          });
                  }
              }
          } else reject("{'error':'no token'}");
        })
            .catch(function(err){
              reject("{'error':'no token'}");
          });
      });
    }
 };